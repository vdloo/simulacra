---
- hosts: all
  tasks:
  - name: Ensure Debian-like OS dependencies are installed
    apt: name={{ item }} state=latest
    with_items:
    - python3
    - python3-dev
    - python3-pip
    - python3-venv
    - python-virtualenv
    - make
    - libmysqlclient-dev
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

  - name: Ensure Archlinux dependencies are installed
    pacman: name={{ item }} state=latest
    with_items:
    - python-pip
    - python
    - python-virtualenv
    - python-sphinx
    - make
    when: "'Arch' in ansible_distribution"

  - name: Install the simulacra repository
    git: 
      repo=https://github.com/vdloo/simulacra.git
      dest=/root/.raptiformica.d/modules/simulacra
      version=master
      recursive=no
      depth=1
      force=yes
      update=yes
    register: simulacra_git

  - name: Make setup.sh executable
    file: dest=/root/.raptiformica.d/modules/simulacra/setup.sh mode=0755

  - name: Download jobrunner dependencies
    command: /root/.raptiformica.d/modules/simulacra/setup.sh
    args:
      chdir: /root/.raptiformica.d/modules/simulacra/

  - name: Ensure shared venv dir exists
    shell: mkdir -p /usr/share/venv

  - name: Install simulacra requirements in the virtualenv on Ubuntu
    pip:
      requirements=/root/.raptiformica.d/modules/simulacra/requirements/base.txt
      virtualenv=/usr/share/venv/simulacra
      virtualenv_command=pyvenv-3.5
    when: ansible_distribution == 'Ubuntu'

  - name: Check if venv already exists
    stat: path=/usr/share/venv/simulacra
    register: manual_venv

  - name: Manually create python 3 venv on Debian
    command: virtualenv -p python3 /usr/share/venv/simulacra
    when: ansible_distribution == 'Debian' and not manual_venv.stat.exists

  - name: Install simulacra requirements in the virtualenv on Debian
    pip:
      requirements=/root/.raptiformica.d/modules/simulacra/requirements/base.txt
      virtualenv=/usr/share/venv/simulacra
      virtualenv_command=virtualenv
    when: ansible_distribution == 'Debian'

  - name: Install simulacra requirements in the virtualenv
    pip:
      requirements=/root/.raptiformica.d/modules/simulacra/requirements/base.txt
      virtualenv=/usr/share/venv/simulacra
      virtualenv_python=python3
    when: "'Arch' in ansible_distribution"

  - name: Install jobrunner systemwide
    command: make install
    args:
      chdir: /root/.raptiformica.d/modules/simulacra/

  - name: Ensure consul config directory exists
    file: path=/etc/consul.d state=directory

  - name: Ensure consul service file for the conductor
    copy:
      src=files/jobrunner.json
      dest=/etc/consul.d/jobrunner.json
    register: consul_service_registered

  - name: Reload consul agent if it is running
    shell: >
      pkill --signal SIGHUP
      -f '^/usr/bin/consul agent
      -config-dir /etc/consul.d/' ||
      /bin/true
    when: consul_service_registered.changed

  - name: Kill the service if it is running an old release
    # - brackets so pkill does not terminate its own process.
    # - grep out any matching processes running in dockers
    shell: >
      ps aux | grep "/root/.raptiformica.d/modules/simulacra/bin/[j]obrunner_run" | awk '{print $2}' |
      xargs --no-run-if-empty -I {} sh -c "grep -q docker /proc/{}/cgroup ||
      kill {}" || /bin/true

  # todo: refactor this to a supervisord script, not all hosts have an init system
  - name: Ensure the detached conductor is running
    shell: >
      screen -ls | grep -v Dead | grep -q simulacra ||
      screen -S simulacra -d -m
      bash -c 'PYTHONPATH=/root/.raptiformica.d/modules/simulacra/
      /usr/share/venv/simulacra/bin/python
      /root/.raptiformica.d/modules/simulacra/bin/jobrunner_run.py'

  - name: Wipe dead screens
    shell: screen -wipe || /bin/true

